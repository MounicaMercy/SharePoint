import { Version, Environment, EnvironmentType } from '@microsoft/sp-core-library';
import {
  BaseClientSideWebPart,
  IPropertyPaneConfiguration,
  PropertyPaneTextField
} from '@microsoft/sp-webpart-base';
import { escape } from '@microsoft/sp-lodash-subset';
import{SPComponentLoader} from '@microsoft/sp-loader';
import styles from './VotingWebPart.module.scss';
import * as strings from 'VotingWebPartStrings';
//import * as $ from 'jquery';
import * as $ from 'jquery';
import pnp from 'sp-pnp-js';
require('bootstrap');
import {GoogleCharts} from 'google-charts';

export interface IVotingWebPartProps {
  description: string;
}
var Locationid;
var User;
export default class VotingWebPart extends BaseClientSideWebPart<IVotingWebPartProps> {

  public render(): void {
   
    let url="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css";
    SPComponentLoader.loadCss(url);
    User = this.context.pageContext.user.displayName;
    this.CheckingUser();
    this.domElement.innerHTML = `
      <div class="${ styles.voting }">
        <div class="${ styles.container }">
          
            <div class="${ styles.column }">
              <div id="Displayusername"></div>
              <div id="display"></div>
              </br>
              
              <button type="button" id="saveid">SAVE</button>
              </br>
              <div id="PieChart"></div>
            </div>
            
        </div>
      </div>`;
      this.getLocation();
      
      $(document).ready(function(){
       
        $(document).on("click",".btn",function()
        {
          Locationid=$(this).attr('id');
          $(".btn").removeClass('active').addClass('disabled');
          $('#'+Locationid).removeAttr('class');
          $('#'+Locationid).addClass('active btn btn-success'); 
         
        });
        $(document).on("click","#saveid",function()
        {
          alert(Locationid);
          SaveVote();
        });
        
      });
      
      function SaveVote()
      {
        if (Environment.type === EnvironmentType.Local)
          {
            this.domElement.querySelector('#saveid').innerHTML = "Sorry this does not work in local workbench";
          } 
        else 
          {
           alert("else");
           pnp.sp.web.lists.getByTitle("Mounica_Votes").items.add({
            Title: Locationid
            });        
          }
          alert("Saving vote..");
      }
  }
  private CheckingUser()
      {
        if (Environment.type === EnvironmentType.Local)
          {
            this.domElement.querySelector('#Displayusername').innerHTML = "Sorry this does not work in local workbench";
          } 
        else 
          {
            var call = $.ajax({
              url: this.context.pageContext.web.absoluteUrl+`/_api/web/Lists/getByTitle('Mounica_Votes')/Items?$select=Title,Created By&$filter=Created By`,
              type:"GET",
                dataType: "json",
                headers: {
                    Accept: "application/json;odata=verbose"
                }
            });
            call.done(function (data, textStatus, jqXHR) {
              var GetUser = $("#Displayusername");
              $.each(data.d.results, function (index, value) {
                GetUser.append(`"You already voted to" ${value.Title}`);
              });
            });
            call.fail(function (jqXHR, textStatus, errorThrown) {
              var response = JSON.parse(jqXHR.responseText);
              var message = response ? response.error.message.value : textStatus;
              alert("Call failed. Error: " + message);
            });
          }
      }
private getLocation()
{
  if (Environment.type === EnvironmentType.Local)
  {
    this.domElement.querySelector('#display').innerHTML = "Sorry this does not work in local workbench";
  } 
  else 
  {
    var call = $.ajax({
      url: this.context.pageContext.web.absoluteUrl+`/_api/web/Lists/getByTitle('Mounica_Location')/Items?$select=Location,ID`,
      type:"GET",
        dataType: "json",
        headers: {
            Accept: "application/json;odata=verbose"
        }
    });
    call.done(function (data, textStatus, jqXHR) {
      var location = $("#display");
      $.each(data.d.results, function (index, value) {
      location.append(`<button type="button" class="btn" id="${value.ID}">${value.Location}</button>&nbsp`);
      });
    });
    call.fail(function (jqXHR, textStatus, errorThrown) {
      var response = JSON.parse(jqXHR.responseText);
      var message = response ? response.error.message.value : textStatus;
      alert("Call failed. Error: " + message);
    });
  }
  GoogleCharts.load(drawChart);
  function drawChart() {
   
      // Standard google charts functionality is available as GoogleCharts.api after load
      const data = GoogleCharts.api.visualization.arrayToDataTable([
          ['Chart thing', 'Chart amount'],
          ['Lorem ipsum', 60],
          ['Dolor sit', 22],
          ['Sit amet', 18]
      ]);
      const pie_1_chart = new GoogleCharts.api.visualization.PieChart(document.getElementById('PieChart'));
      pie_1_chart.draw(data);
  }
}

  protected get dataVersion(): Version {
    return Version.parse('1.0');
  }

  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {
    return {
      pages: [
        {
          header: {
            description: strings.PropertyPaneDescription
          },
          groups: [
            {
              groupName: strings.BasicGroupName,
              groupFields: [
                PropertyPaneTextField('description', {
                  label: strings.DescriptionFieldLabel
                })
              ]
            }
          ]
        }
      ]
    };
  }
}
